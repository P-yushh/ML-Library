# -*- coding: utf-8 -*-
"""Linear Regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lwtjbvvKQr_qSet_eqtoM5hiRKhDtTmP
"""

import numpy as np
import matplotlib.pyplot as plt

class linear_reg:
    
    def __init__(self, learning_rate = 0.0000001, no_of_iter = 10000):
        self.learning_rate = learning_rate
        self.no_of_iter = no_of_iter
        
    def train(self, X_train, Y_train):
        no_of_example, no_of_feature = X_train.shape
        self.const = 0
        self.weight = [0 for i in range(no_of_feature)]
        
        for i in range(self.no_of_iter):
            y_pred = np.dot(X_train, self.weight) + self.const
            
            dw = (1/no_of_example)*np.dot(X_train.T, (y_pred - Y_train))
            dc = (1/no_of_example)*np.sum((y_pred -  Y_train))
            
            self.weight -= self.learning_rate*dw
            self.const -= self.learning_rate*dc
                  
    def predict(self, X_test):
        Y_pred = np.dot(X_test, self.weight) + self.const 
        return Y_pred
    
    def mean_square_error(self, X_test, Y_test):
        pred = self.predict(X_test)
        loss = sum(((pred - Y_test)**2)/(2*len(X_test)))
        if loss > 10:
            print("Error is large, try altering 'learning rate' and/or 'no of iterations'!")
        elif loss < 0.01:
            print("Error is less, 'learning rate' and 'no of iterations' are optimum!")
        return print("Mean Square Error is: ", loss)
        
    def plot(self, X_test, Y_test):
        no_of_example, no_of_feature = X_test.shape
        if no_of_feature == 1:
            Y_pred = self.predict(X_test)
            plt.scatter(X_test, Y_test)
            plt.plot(X_test, Y_pred, color = 'red')
            plt.xlabel('Test data')
            plt.ylabel('Predicted Output')
            plt.show() 
        else:
            raise TypeError('Unable to visaulize any plot for multifeature input')

import pandas as pd
train_data=pd.read_csv("sample_data/mnist_train_small.csv")
test_data = pd.read_csv("sample_data/mnist_test.csv")
pd.set_option('display.max_columns', 500)
test_data.head(10)
Y1 = train_data.iloc[:,0]
X1 = train_data.drop("6", axis = 1)

Y2 = test_data.iloc[:,0]
X2 = test_data.drop("7", axis = 1)

linreg = linear_reg()
linreg.train(X1, Y1)
linreg.mean_square_error(X2, Y2)